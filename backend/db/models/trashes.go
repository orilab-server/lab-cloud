// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Trash is an object representing the database table.
type Trash struct {
	ID        string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	DirID     null.String `boil:"dir_id" json:"dir_id,omitempty" toml:"dir_id" yaml:"dir_id,omitempty"`
	FileID    null.String `boil:"file_id" json:"file_id,omitempty" toml:"file_id" yaml:"file_id,omitempty"`
	IsDelete  bool        `boil:"is_delete" json:"is_delete" toml:"is_delete" yaml:"is_delete"`
	CreatedAt time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *trashR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L trashL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TrashColumns = struct {
	ID        string
	DirID     string
	FileID    string
	IsDelete  string
	CreatedAt string
}{
	ID:        "id",
	DirID:     "dir_id",
	FileID:    "file_id",
	IsDelete:  "is_delete",
	CreatedAt: "created_at",
}

// Generated where

var TrashWhere = struct {
	ID        whereHelperstring
	DirID     whereHelpernull_String
	FileID    whereHelpernull_String
	IsDelete  whereHelperbool
	CreatedAt whereHelpertime_Time
}{
	ID:        whereHelperstring{field: "\"trashes\".\"id\""},
	DirID:     whereHelpernull_String{field: "\"trashes\".\"dir_id\""},
	FileID:    whereHelpernull_String{field: "\"trashes\".\"file_id\""},
	IsDelete:  whereHelperbool{field: "\"trashes\".\"is_delete\""},
	CreatedAt: whereHelpertime_Time{field: "\"trashes\".\"created_at\""},
}

// TrashRels is where relationship names are stored.
var TrashRels = struct {
	Dir  string
	File string
}{
	Dir:  "Dir",
	File: "File",
}

// trashR is where relationships are stored.
type trashR struct {
	Dir  *Dir
	File *File
}

// NewStruct creates a new relationship struct
func (*trashR) NewStruct() *trashR {
	return &trashR{}
}

// trashL is where Load methods for each relationship are stored.
type trashL struct{}

var (
	trashAllColumns            = []string{"id", "dir_id", "file_id", "is_delete", "created_at"}
	trashColumnsWithoutDefault = []string{"dir_id", "file_id"}
	trashColumnsWithDefault    = []string{"id", "is_delete", "created_at"}
	trashPrimaryKeyColumns     = []string{"id"}
)

type (
	// TrashSlice is an alias for a slice of pointers to Trash.
	// This should generally be used opposed to []Trash.
	TrashSlice []*Trash
	// TrashHook is the signature for custom Trash hook methods
	TrashHook func(context.Context, boil.ContextExecutor, *Trash) error

	trashQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	trashType                 = reflect.TypeOf(&Trash{})
	trashMapping              = queries.MakeStructMapping(trashType)
	trashPrimaryKeyMapping, _ = queries.BindMapping(trashType, trashMapping, trashPrimaryKeyColumns)
	trashInsertCacheMut       sync.RWMutex
	trashInsertCache          = make(map[string]insertCache)
	trashUpdateCacheMut       sync.RWMutex
	trashUpdateCache          = make(map[string]updateCache)
	trashUpsertCacheMut       sync.RWMutex
	trashUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var trashBeforeInsertHooks []TrashHook
var trashBeforeUpdateHooks []TrashHook
var trashBeforeDeleteHooks []TrashHook
var trashBeforeUpsertHooks []TrashHook

var trashAfterInsertHooks []TrashHook
var trashAfterSelectHooks []TrashHook
var trashAfterUpdateHooks []TrashHook
var trashAfterDeleteHooks []TrashHook
var trashAfterUpsertHooks []TrashHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Trash) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trashBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Trash) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trashBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Trash) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trashBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Trash) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trashBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Trash) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trashAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Trash) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trashAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Trash) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trashAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Trash) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trashAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Trash) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range trashAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTrashHook registers your hook function for all future operations.
func AddTrashHook(hookPoint boil.HookPoint, trashHook TrashHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		trashBeforeInsertHooks = append(trashBeforeInsertHooks, trashHook)
	case boil.BeforeUpdateHook:
		trashBeforeUpdateHooks = append(trashBeforeUpdateHooks, trashHook)
	case boil.BeforeDeleteHook:
		trashBeforeDeleteHooks = append(trashBeforeDeleteHooks, trashHook)
	case boil.BeforeUpsertHook:
		trashBeforeUpsertHooks = append(trashBeforeUpsertHooks, trashHook)
	case boil.AfterInsertHook:
		trashAfterInsertHooks = append(trashAfterInsertHooks, trashHook)
	case boil.AfterSelectHook:
		trashAfterSelectHooks = append(trashAfterSelectHooks, trashHook)
	case boil.AfterUpdateHook:
		trashAfterUpdateHooks = append(trashAfterUpdateHooks, trashHook)
	case boil.AfterDeleteHook:
		trashAfterDeleteHooks = append(trashAfterDeleteHooks, trashHook)
	case boil.AfterUpsertHook:
		trashAfterUpsertHooks = append(trashAfterUpsertHooks, trashHook)
	}
}

// One returns a single trash record from the query.
func (q trashQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Trash, error) {
	o := &Trash{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for trashes")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Trash records from the query.
func (q trashQuery) All(ctx context.Context, exec boil.ContextExecutor) (TrashSlice, error) {
	var o []*Trash

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Trash slice")
	}

	if len(trashAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Trash records in the query.
func (q trashQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count trashes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q trashQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if trashes exists")
	}

	return count > 0, nil
}

// Dir pointed to by the foreign key.
func (o *Trash) Dir(mods ...qm.QueryMod) dirQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DirID),
	}

	queryMods = append(queryMods, mods...)

	query := Dirs(queryMods...)
	queries.SetFrom(query.Query, "\"dirs\"")

	return query
}

// File pointed to by the foreign key.
func (o *Trash) File(mods ...qm.QueryMod) fileQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FileID),
	}

	queryMods = append(queryMods, mods...)

	query := Files(queryMods...)
	queries.SetFrom(query.Query, "\"files\"")

	return query
}

// LoadDir allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (trashL) LoadDir(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTrash interface{}, mods queries.Applicator) error {
	var slice []*Trash
	var object *Trash

	if singular {
		object = maybeTrash.(*Trash)
	} else {
		slice = *maybeTrash.(*[]*Trash)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &trashR{}
		}
		if !queries.IsNil(object.DirID) {
			args = append(args, object.DirID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trashR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.DirID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.DirID) {
				args = append(args, obj.DirID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`dirs`), qm.WhereIn(`dirs.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Dir")
	}

	var resultSlice []*Dir
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Dir")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for dirs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dirs")
	}

	if len(trashAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Dir = foreign
		if foreign.R == nil {
			foreign.R = &dirR{}
		}
		foreign.R.Trashes = append(foreign.R.Trashes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.DirID, foreign.ID) {
				local.R.Dir = foreign
				if foreign.R == nil {
					foreign.R = &dirR{}
				}
				foreign.R.Trashes = append(foreign.R.Trashes, local)
				break
			}
		}
	}

	return nil
}

// LoadFile allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (trashL) LoadFile(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTrash interface{}, mods queries.Applicator) error {
	var slice []*Trash
	var object *Trash

	if singular {
		object = maybeTrash.(*Trash)
	} else {
		slice = *maybeTrash.(*[]*Trash)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &trashR{}
		}
		if !queries.IsNil(object.FileID) {
			args = append(args, object.FileID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &trashR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.FileID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.FileID) {
				args = append(args, obj.FileID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`files`), qm.WhereIn(`files.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load File")
	}

	var resultSlice []*File
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice File")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for files")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for files")
	}

	if len(trashAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.File = foreign
		if foreign.R == nil {
			foreign.R = &fileR{}
		}
		foreign.R.Trashes = append(foreign.R.Trashes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.FileID, foreign.ID) {
				local.R.File = foreign
				if foreign.R == nil {
					foreign.R = &fileR{}
				}
				foreign.R.Trashes = append(foreign.R.Trashes, local)
				break
			}
		}
	}

	return nil
}

// SetDir of the trash to the related item.
// Sets o.R.Dir to related.
// Adds o to related.R.Trashes.
func (o *Trash) SetDir(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Dir) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"trashes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"dir_id"}),
		strmangle.WhereClause("\"", "\"", 2, trashPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.DirID, related.ID)
	if o.R == nil {
		o.R = &trashR{
			Dir: related,
		}
	} else {
		o.R.Dir = related
	}

	if related.R == nil {
		related.R = &dirR{
			Trashes: TrashSlice{o},
		}
	} else {
		related.R.Trashes = append(related.R.Trashes, o)
	}

	return nil
}

// RemoveDir relationship.
// Sets o.R.Dir to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Trash) RemoveDir(ctx context.Context, exec boil.ContextExecutor, related *Dir) error {
	var err error

	queries.SetScanner(&o.DirID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("dir_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Dir = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Trashes {
		if queries.Equal(o.DirID, ri.DirID) {
			continue
		}

		ln := len(related.R.Trashes)
		if ln > 1 && i < ln-1 {
			related.R.Trashes[i] = related.R.Trashes[ln-1]
		}
		related.R.Trashes = related.R.Trashes[:ln-1]
		break
	}
	return nil
}

// SetFile of the trash to the related item.
// Sets o.R.File to related.
// Adds o to related.R.Trashes.
func (o *Trash) SetFile(ctx context.Context, exec boil.ContextExecutor, insert bool, related *File) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"trashes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"file_id"}),
		strmangle.WhereClause("\"", "\"", 2, trashPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.FileID, related.ID)
	if o.R == nil {
		o.R = &trashR{
			File: related,
		}
	} else {
		o.R.File = related
	}

	if related.R == nil {
		related.R = &fileR{
			Trashes: TrashSlice{o},
		}
	} else {
		related.R.Trashes = append(related.R.Trashes, o)
	}

	return nil
}

// RemoveFile relationship.
// Sets o.R.File to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Trash) RemoveFile(ctx context.Context, exec boil.ContextExecutor, related *File) error {
	var err error

	queries.SetScanner(&o.FileID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("file_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.File = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Trashes {
		if queries.Equal(o.FileID, ri.FileID) {
			continue
		}

		ln := len(related.R.Trashes)
		if ln > 1 && i < ln-1 {
			related.R.Trashes[i] = related.R.Trashes[ln-1]
		}
		related.R.Trashes = related.R.Trashes[:ln-1]
		break
	}
	return nil
}

// Trashes retrieves all the records using an executor.
func Trashes(mods ...qm.QueryMod) trashQuery {
	mods = append(mods, qm.From("\"trashes\""))
	return trashQuery{NewQuery(mods...)}
}

// FindTrash retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTrash(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Trash, error) {
	trashObj := &Trash{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"trashes\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, trashObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from trashes")
	}

	return trashObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Trash) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no trashes provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(trashColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	trashInsertCacheMut.RLock()
	cache, cached := trashInsertCache[key]
	trashInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			trashAllColumns,
			trashColumnsWithDefault,
			trashColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(trashType, trashMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(trashType, trashMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"trashes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"trashes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into trashes")
	}

	if !cached {
		trashInsertCacheMut.Lock()
		trashInsertCache[key] = cache
		trashInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Trash.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Trash) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	trashUpdateCacheMut.RLock()
	cache, cached := trashUpdateCache[key]
	trashUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			trashAllColumns,
			trashPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update trashes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"trashes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, trashPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(trashType, trashMapping, append(wl, trashPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update trashes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for trashes")
	}

	if !cached {
		trashUpdateCacheMut.Lock()
		trashUpdateCache[key] = cache
		trashUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q trashQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for trashes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for trashes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TrashSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trashPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"trashes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, trashPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in trash slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all trash")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Trash) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no trashes provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(trashColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	trashUpsertCacheMut.RLock()
	cache, cached := trashUpsertCache[key]
	trashUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			trashAllColumns,
			trashColumnsWithDefault,
			trashColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			trashAllColumns,
			trashPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert trashes, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(trashPrimaryKeyColumns))
			copy(conflict, trashPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"trashes\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(trashType, trashMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(trashType, trashMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert trashes")
	}

	if !cached {
		trashUpsertCacheMut.Lock()
		trashUpsertCache[key] = cache
		trashUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Trash record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Trash) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Trash provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), trashPrimaryKeyMapping)
	sql := "DELETE FROM \"trashes\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from trashes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for trashes")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q trashQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no trashQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from trashes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for trashes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TrashSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(trashBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trashPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"trashes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, trashPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from trash slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for trashes")
	}

	if len(trashAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Trash) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTrash(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TrashSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TrashSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), trashPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"trashes\".* FROM \"trashes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, trashPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TrashSlice")
	}

	*o = slice

	return nil
}

// TrashExists checks if the Trash row exists.
func TrashExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"trashes\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if trashes exists")
	}

	return exists, nil
}
