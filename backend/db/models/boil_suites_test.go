// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Dirs", testDirs)
	t.Run("Files", testFiles)
	t.Run("RegisterRequests", testRegisterRequests)
	t.Run("ResetTokens", testResetTokens)
	t.Run("SchemaMigrations", testSchemaMigrations)
	t.Run("Trashes", testTrashes)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("Dirs", testDirsDelete)
	t.Run("Files", testFilesDelete)
	t.Run("RegisterRequests", testRegisterRequestsDelete)
	t.Run("ResetTokens", testResetTokensDelete)
	t.Run("SchemaMigrations", testSchemaMigrationsDelete)
	t.Run("Trashes", testTrashesDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Dirs", testDirsQueryDeleteAll)
	t.Run("Files", testFilesQueryDeleteAll)
	t.Run("RegisterRequests", testRegisterRequestsQueryDeleteAll)
	t.Run("ResetTokens", testResetTokensQueryDeleteAll)
	t.Run("SchemaMigrations", testSchemaMigrationsQueryDeleteAll)
	t.Run("Trashes", testTrashesQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Dirs", testDirsSliceDeleteAll)
	t.Run("Files", testFilesSliceDeleteAll)
	t.Run("RegisterRequests", testRegisterRequestsSliceDeleteAll)
	t.Run("ResetTokens", testResetTokensSliceDeleteAll)
	t.Run("SchemaMigrations", testSchemaMigrationsSliceDeleteAll)
	t.Run("Trashes", testTrashesSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Dirs", testDirsExists)
	t.Run("Files", testFilesExists)
	t.Run("RegisterRequests", testRegisterRequestsExists)
	t.Run("ResetTokens", testResetTokensExists)
	t.Run("SchemaMigrations", testSchemaMigrationsExists)
	t.Run("Trashes", testTrashesExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("Dirs", testDirsFind)
	t.Run("Files", testFilesFind)
	t.Run("RegisterRequests", testRegisterRequestsFind)
	t.Run("ResetTokens", testResetTokensFind)
	t.Run("SchemaMigrations", testSchemaMigrationsFind)
	t.Run("Trashes", testTrashesFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("Dirs", testDirsBind)
	t.Run("Files", testFilesBind)
	t.Run("RegisterRequests", testRegisterRequestsBind)
	t.Run("ResetTokens", testResetTokensBind)
	t.Run("SchemaMigrations", testSchemaMigrationsBind)
	t.Run("Trashes", testTrashesBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("Dirs", testDirsOne)
	t.Run("Files", testFilesOne)
	t.Run("RegisterRequests", testRegisterRequestsOne)
	t.Run("ResetTokens", testResetTokensOne)
	t.Run("SchemaMigrations", testSchemaMigrationsOne)
	t.Run("Trashes", testTrashesOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("Dirs", testDirsAll)
	t.Run("Files", testFilesAll)
	t.Run("RegisterRequests", testRegisterRequestsAll)
	t.Run("ResetTokens", testResetTokensAll)
	t.Run("SchemaMigrations", testSchemaMigrationsAll)
	t.Run("Trashes", testTrashesAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("Dirs", testDirsCount)
	t.Run("Files", testFilesCount)
	t.Run("RegisterRequests", testRegisterRequestsCount)
	t.Run("ResetTokens", testResetTokensCount)
	t.Run("SchemaMigrations", testSchemaMigrationsCount)
	t.Run("Trashes", testTrashesCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("Dirs", testDirsHooks)
	t.Run("Files", testFilesHooks)
	t.Run("RegisterRequests", testRegisterRequestsHooks)
	t.Run("ResetTokens", testResetTokensHooks)
	t.Run("SchemaMigrations", testSchemaMigrationsHooks)
	t.Run("Trashes", testTrashesHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Dirs", testDirsInsert)
	t.Run("Dirs", testDirsInsertWhitelist)
	t.Run("Files", testFilesInsert)
	t.Run("Files", testFilesInsertWhitelist)
	t.Run("RegisterRequests", testRegisterRequestsInsert)
	t.Run("RegisterRequests", testRegisterRequestsInsertWhitelist)
	t.Run("ResetTokens", testResetTokensInsert)
	t.Run("ResetTokens", testResetTokensInsertWhitelist)
	t.Run("SchemaMigrations", testSchemaMigrationsInsert)
	t.Run("SchemaMigrations", testSchemaMigrationsInsertWhitelist)
	t.Run("Trashes", testTrashesInsert)
	t.Run("Trashes", testTrashesInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("DirToUserUsingUser", testDirToOneUserUsingUser)
	t.Run("FileToDirUsingDir", testFileToOneDirUsingDir)
	t.Run("FileToUserUsingUser", testFileToOneUserUsingUser)
	t.Run("TrashToDirUsingDir", testTrashToOneDirUsingDir)
	t.Run("TrashToFileUsingFile", testTrashToOneFileUsingFile)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("DirToFiles", testDirToManyFiles)
	t.Run("DirToTrashes", testDirToManyTrashes)
	t.Run("FileToTrashes", testFileToManyTrashes)
	t.Run("UserToDirs", testUserToManyDirs)
	t.Run("UserToFiles", testUserToManyFiles)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("DirToUserUsingDirs", testDirToOneSetOpUserUsingUser)
	t.Run("FileToDirUsingFiles", testFileToOneSetOpDirUsingDir)
	t.Run("FileToUserUsingFiles", testFileToOneSetOpUserUsingUser)
	t.Run("TrashToDirUsingTrashes", testTrashToOneSetOpDirUsingDir)
	t.Run("TrashToFileUsingTrashes", testTrashToOneSetOpFileUsingFile)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("TrashToDirUsingTrashes", testTrashToOneRemoveOpDirUsingDir)
	t.Run("TrashToFileUsingTrashes", testTrashToOneRemoveOpFileUsingFile)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("DirToFiles", testDirToManyAddOpFiles)
	t.Run("DirToTrashes", testDirToManyAddOpTrashes)
	t.Run("FileToTrashes", testFileToManyAddOpTrashes)
	t.Run("UserToDirs", testUserToManyAddOpDirs)
	t.Run("UserToFiles", testUserToManyAddOpFiles)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("DirToTrashes", testDirToManySetOpTrashes)
	t.Run("FileToTrashes", testFileToManySetOpTrashes)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("DirToTrashes", testDirToManyRemoveOpTrashes)
	t.Run("FileToTrashes", testFileToManyRemoveOpTrashes)
}

func TestReload(t *testing.T) {
	t.Run("Dirs", testDirsReload)
	t.Run("Files", testFilesReload)
	t.Run("RegisterRequests", testRegisterRequestsReload)
	t.Run("ResetTokens", testResetTokensReload)
	t.Run("SchemaMigrations", testSchemaMigrationsReload)
	t.Run("Trashes", testTrashesReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Dirs", testDirsReloadAll)
	t.Run("Files", testFilesReloadAll)
	t.Run("RegisterRequests", testRegisterRequestsReloadAll)
	t.Run("ResetTokens", testResetTokensReloadAll)
	t.Run("SchemaMigrations", testSchemaMigrationsReloadAll)
	t.Run("Trashes", testTrashesReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Dirs", testDirsSelect)
	t.Run("Files", testFilesSelect)
	t.Run("RegisterRequests", testRegisterRequestsSelect)
	t.Run("ResetTokens", testResetTokensSelect)
	t.Run("SchemaMigrations", testSchemaMigrationsSelect)
	t.Run("Trashes", testTrashesSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Dirs", testDirsUpdate)
	t.Run("Files", testFilesUpdate)
	t.Run("RegisterRequests", testRegisterRequestsUpdate)
	t.Run("ResetTokens", testResetTokensUpdate)
	t.Run("SchemaMigrations", testSchemaMigrationsUpdate)
	t.Run("Trashes", testTrashesUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Dirs", testDirsSliceUpdateAll)
	t.Run("Files", testFilesSliceUpdateAll)
	t.Run("RegisterRequests", testRegisterRequestsSliceUpdateAll)
	t.Run("ResetTokens", testResetTokensSliceUpdateAll)
	t.Run("SchemaMigrations", testSchemaMigrationsSliceUpdateAll)
	t.Run("Trashes", testTrashesSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
