// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ReviewedFile is an object representing the database table.
type ReviewedFile struct {
	ID         string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	ReviewedID string    `boil:"reviewed_id" json:"reviewed_id" toml:"reviewed_id" yaml:"reviewed_id"`
	FileName   string    `boil:"file_name" json:"file_name" toml:"file_name" yaml:"file_name"`
	CreatedAt  time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *reviewedFileR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L reviewedFileL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ReviewedFileColumns = struct {
	ID         string
	ReviewedID string
	FileName   string
	CreatedAt  string
}{
	ID:         "id",
	ReviewedID: "reviewed_id",
	FileName:   "file_name",
	CreatedAt:  "created_at",
}

var ReviewedFileTableColumns = struct {
	ID         string
	ReviewedID string
	FileName   string
	CreatedAt  string
}{
	ID:         "reviewed_files.id",
	ReviewedID: "reviewed_files.reviewed_id",
	FileName:   "reviewed_files.file_name",
	CreatedAt:  "reviewed_files.created_at",
}

// Generated where

var ReviewedFileWhere = struct {
	ID         whereHelperstring
	ReviewedID whereHelperstring
	FileName   whereHelperstring
	CreatedAt  whereHelpertime_Time
}{
	ID:         whereHelperstring{field: "`reviewed_files`.`id`"},
	ReviewedID: whereHelperstring{field: "`reviewed_files`.`reviewed_id`"},
	FileName:   whereHelperstring{field: "`reviewed_files`.`file_name`"},
	CreatedAt:  whereHelpertime_Time{field: "`reviewed_files`.`created_at`"},
}

// ReviewedFileRels is where relationship names are stored.
var ReviewedFileRels = struct {
	Reviewed       string
	ReviewComments string
	Reviewers      string
}{
	Reviewed:       "Reviewed",
	ReviewComments: "ReviewComments",
	Reviewers:      "Reviewers",
}

// reviewedFileR is where relationships are stored.
type reviewedFileR struct {
	Reviewed       *Reviewed          `boil:"Reviewed" json:"Reviewed" toml:"Reviewed" yaml:"Reviewed"`
	ReviewComments ReviewCommentSlice `boil:"ReviewComments" json:"ReviewComments" toml:"ReviewComments" yaml:"ReviewComments"`
	Reviewers      ReviewerSlice      `boil:"Reviewers" json:"Reviewers" toml:"Reviewers" yaml:"Reviewers"`
}

// NewStruct creates a new relationship struct
func (*reviewedFileR) NewStruct() *reviewedFileR {
	return &reviewedFileR{}
}

func (r *reviewedFileR) GetReviewed() *Reviewed {
	if r == nil {
		return nil
	}
	return r.Reviewed
}

func (r *reviewedFileR) GetReviewComments() ReviewCommentSlice {
	if r == nil {
		return nil
	}
	return r.ReviewComments
}

func (r *reviewedFileR) GetReviewers() ReviewerSlice {
	if r == nil {
		return nil
	}
	return r.Reviewers
}

// reviewedFileL is where Load methods for each relationship are stored.
type reviewedFileL struct{}

var (
	reviewedFileAllColumns            = []string{"id", "reviewed_id", "file_name", "created_at"}
	reviewedFileColumnsWithoutDefault = []string{"id", "reviewed_id", "file_name"}
	reviewedFileColumnsWithDefault    = []string{"created_at"}
	reviewedFilePrimaryKeyColumns     = []string{"id"}
	reviewedFileGeneratedColumns      = []string{}
)

type (
	// ReviewedFileSlice is an alias for a slice of pointers to ReviewedFile.
	// This should almost always be used instead of []ReviewedFile.
	ReviewedFileSlice []*ReviewedFile
	// ReviewedFileHook is the signature for custom ReviewedFile hook methods
	ReviewedFileHook func(context.Context, boil.ContextExecutor, *ReviewedFile) error

	reviewedFileQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	reviewedFileType                 = reflect.TypeOf(&ReviewedFile{})
	reviewedFileMapping              = queries.MakeStructMapping(reviewedFileType)
	reviewedFilePrimaryKeyMapping, _ = queries.BindMapping(reviewedFileType, reviewedFileMapping, reviewedFilePrimaryKeyColumns)
	reviewedFileInsertCacheMut       sync.RWMutex
	reviewedFileInsertCache          = make(map[string]insertCache)
	reviewedFileUpdateCacheMut       sync.RWMutex
	reviewedFileUpdateCache          = make(map[string]updateCache)
	reviewedFileUpsertCacheMut       sync.RWMutex
	reviewedFileUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var reviewedFileAfterSelectHooks []ReviewedFileHook

var reviewedFileBeforeInsertHooks []ReviewedFileHook
var reviewedFileAfterInsertHooks []ReviewedFileHook

var reviewedFileBeforeUpdateHooks []ReviewedFileHook
var reviewedFileAfterUpdateHooks []ReviewedFileHook

var reviewedFileBeforeDeleteHooks []ReviewedFileHook
var reviewedFileAfterDeleteHooks []ReviewedFileHook

var reviewedFileBeforeUpsertHooks []ReviewedFileHook
var reviewedFileAfterUpsertHooks []ReviewedFileHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ReviewedFile) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewedFileAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ReviewedFile) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewedFileBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ReviewedFile) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewedFileAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ReviewedFile) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewedFileBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ReviewedFile) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewedFileAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ReviewedFile) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewedFileBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ReviewedFile) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewedFileAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ReviewedFile) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewedFileBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ReviewedFile) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewedFileAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddReviewedFileHook registers your hook function for all future operations.
func AddReviewedFileHook(hookPoint boil.HookPoint, reviewedFileHook ReviewedFileHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		reviewedFileAfterSelectHooks = append(reviewedFileAfterSelectHooks, reviewedFileHook)
	case boil.BeforeInsertHook:
		reviewedFileBeforeInsertHooks = append(reviewedFileBeforeInsertHooks, reviewedFileHook)
	case boil.AfterInsertHook:
		reviewedFileAfterInsertHooks = append(reviewedFileAfterInsertHooks, reviewedFileHook)
	case boil.BeforeUpdateHook:
		reviewedFileBeforeUpdateHooks = append(reviewedFileBeforeUpdateHooks, reviewedFileHook)
	case boil.AfterUpdateHook:
		reviewedFileAfterUpdateHooks = append(reviewedFileAfterUpdateHooks, reviewedFileHook)
	case boil.BeforeDeleteHook:
		reviewedFileBeforeDeleteHooks = append(reviewedFileBeforeDeleteHooks, reviewedFileHook)
	case boil.AfterDeleteHook:
		reviewedFileAfterDeleteHooks = append(reviewedFileAfterDeleteHooks, reviewedFileHook)
	case boil.BeforeUpsertHook:
		reviewedFileBeforeUpsertHooks = append(reviewedFileBeforeUpsertHooks, reviewedFileHook)
	case boil.AfterUpsertHook:
		reviewedFileAfterUpsertHooks = append(reviewedFileAfterUpsertHooks, reviewedFileHook)
	}
}

// One returns a single reviewedFile record from the query.
func (q reviewedFileQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ReviewedFile, error) {
	o := &ReviewedFile{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for reviewed_files")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ReviewedFile records from the query.
func (q reviewedFileQuery) All(ctx context.Context, exec boil.ContextExecutor) (ReviewedFileSlice, error) {
	var o []*ReviewedFile

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ReviewedFile slice")
	}

	if len(reviewedFileAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ReviewedFile records in the query.
func (q reviewedFileQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count reviewed_files rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q reviewedFileQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if reviewed_files exists")
	}

	return count > 0, nil
}

// Reviewed pointed to by the foreign key.
func (o *ReviewedFile) Reviewed(mods ...qm.QueryMod) reviewedQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.ReviewedID),
	}

	queryMods = append(queryMods, mods...)

	return Revieweds(queryMods...)
}

// ReviewComments retrieves all the review_comment's ReviewComments with an executor.
func (o *ReviewedFile) ReviewComments(mods ...qm.QueryMod) reviewCommentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`review_comments`.`reviewed_file_id`=?", o.ID),
	)

	return ReviewComments(queryMods...)
}

// Reviewers retrieves all the reviewer's Reviewers with an executor.
func (o *ReviewedFile) Reviewers(mods ...qm.QueryMod) reviewerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`reviewers`.`reviewed_file_id`=?", o.ID),
	)

	return Reviewers(queryMods...)
}

// LoadReviewed allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (reviewedFileL) LoadReviewed(ctx context.Context, e boil.ContextExecutor, singular bool, maybeReviewedFile interface{}, mods queries.Applicator) error {
	var slice []*ReviewedFile
	var object *ReviewedFile

	if singular {
		var ok bool
		object, ok = maybeReviewedFile.(*ReviewedFile)
		if !ok {
			object = new(ReviewedFile)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeReviewedFile)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeReviewedFile))
			}
		}
	} else {
		s, ok := maybeReviewedFile.(*[]*ReviewedFile)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeReviewedFile)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeReviewedFile))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &reviewedFileR{}
		}
		args = append(args, object.ReviewedID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &reviewedFileR{}
			}

			for _, a := range args {
				if a == obj.ReviewedID {
					continue Outer
				}
			}

			args = append(args, obj.ReviewedID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`reviewed`),
		qm.WhereIn(`reviewed.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Reviewed")
	}

	var resultSlice []*Reviewed
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Reviewed")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for reviewed")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for reviewed")
	}

	if len(reviewedFileAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Reviewed = foreign
		if foreign.R == nil {
			foreign.R = &reviewedR{}
		}
		foreign.R.ReviewedFiles = append(foreign.R.ReviewedFiles, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ReviewedID == foreign.ID {
				local.R.Reviewed = foreign
				if foreign.R == nil {
					foreign.R = &reviewedR{}
				}
				foreign.R.ReviewedFiles = append(foreign.R.ReviewedFiles, local)
				break
			}
		}
	}

	return nil
}

// LoadReviewComments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (reviewedFileL) LoadReviewComments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeReviewedFile interface{}, mods queries.Applicator) error {
	var slice []*ReviewedFile
	var object *ReviewedFile

	if singular {
		var ok bool
		object, ok = maybeReviewedFile.(*ReviewedFile)
		if !ok {
			object = new(ReviewedFile)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeReviewedFile)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeReviewedFile))
			}
		}
	} else {
		s, ok := maybeReviewedFile.(*[]*ReviewedFile)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeReviewedFile)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeReviewedFile))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &reviewedFileR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &reviewedFileR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`review_comments`),
		qm.WhereIn(`review_comments.reviewed_file_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load review_comments")
	}

	var resultSlice []*ReviewComment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice review_comments")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on review_comments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for review_comments")
	}

	if len(reviewCommentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ReviewComments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &reviewCommentR{}
			}
			foreign.R.ReviewedFile = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ReviewedFileID {
				local.R.ReviewComments = append(local.R.ReviewComments, foreign)
				if foreign.R == nil {
					foreign.R = &reviewCommentR{}
				}
				foreign.R.ReviewedFile = local
				break
			}
		}
	}

	return nil
}

// LoadReviewers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (reviewedFileL) LoadReviewers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeReviewedFile interface{}, mods queries.Applicator) error {
	var slice []*ReviewedFile
	var object *ReviewedFile

	if singular {
		var ok bool
		object, ok = maybeReviewedFile.(*ReviewedFile)
		if !ok {
			object = new(ReviewedFile)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeReviewedFile)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeReviewedFile))
			}
		}
	} else {
		s, ok := maybeReviewedFile.(*[]*ReviewedFile)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeReviewedFile)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeReviewedFile))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &reviewedFileR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &reviewedFileR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`reviewers`),
		qm.WhereIn(`reviewers.reviewed_file_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load reviewers")
	}

	var resultSlice []*Reviewer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice reviewers")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on reviewers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for reviewers")
	}

	if len(reviewerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Reviewers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &reviewerR{}
			}
			foreign.R.ReviewedFile = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ReviewedFileID {
				local.R.Reviewers = append(local.R.Reviewers, foreign)
				if foreign.R == nil {
					foreign.R = &reviewerR{}
				}
				foreign.R.ReviewedFile = local
				break
			}
		}
	}

	return nil
}

// SetReviewed of the reviewedFile to the related item.
// Sets o.R.Reviewed to related.
// Adds o to related.R.ReviewedFiles.
func (o *ReviewedFile) SetReviewed(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Reviewed) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `reviewed_files` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"reviewed_id"}),
		strmangle.WhereClause("`", "`", 0, reviewedFilePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ReviewedID = related.ID
	if o.R == nil {
		o.R = &reviewedFileR{
			Reviewed: related,
		}
	} else {
		o.R.Reviewed = related
	}

	if related.R == nil {
		related.R = &reviewedR{
			ReviewedFiles: ReviewedFileSlice{o},
		}
	} else {
		related.R.ReviewedFiles = append(related.R.ReviewedFiles, o)
	}

	return nil
}

// AddReviewComments adds the given related objects to the existing relationships
// of the reviewed_file, optionally inserting them as new records.
// Appends related to o.R.ReviewComments.
// Sets related.R.ReviewedFile appropriately.
func (o *ReviewedFile) AddReviewComments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ReviewComment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ReviewedFileID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `review_comments` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"reviewed_file_id"}),
				strmangle.WhereClause("`", "`", 0, reviewCommentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ReviewedFileID = o.ID
		}
	}

	if o.R == nil {
		o.R = &reviewedFileR{
			ReviewComments: related,
		}
	} else {
		o.R.ReviewComments = append(o.R.ReviewComments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &reviewCommentR{
				ReviewedFile: o,
			}
		} else {
			rel.R.ReviewedFile = o
		}
	}
	return nil
}

// AddReviewers adds the given related objects to the existing relationships
// of the reviewed_file, optionally inserting them as new records.
// Appends related to o.R.Reviewers.
// Sets related.R.ReviewedFile appropriately.
func (o *ReviewedFile) AddReviewers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Reviewer) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ReviewedFileID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `reviewers` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"reviewed_file_id"}),
				strmangle.WhereClause("`", "`", 0, reviewerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ReviewedFileID = o.ID
		}
	}

	if o.R == nil {
		o.R = &reviewedFileR{
			Reviewers: related,
		}
	} else {
		o.R.Reviewers = append(o.R.Reviewers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &reviewerR{
				ReviewedFile: o,
			}
		} else {
			rel.R.ReviewedFile = o
		}
	}
	return nil
}

// ReviewedFiles retrieves all the records using an executor.
func ReviewedFiles(mods ...qm.QueryMod) reviewedFileQuery {
	mods = append(mods, qm.From("`reviewed_files`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`reviewed_files`.*"})
	}

	return reviewedFileQuery{q}
}

// FindReviewedFile retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindReviewedFile(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*ReviewedFile, error) {
	reviewedFileObj := &ReviewedFile{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `reviewed_files` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, reviewedFileObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from reviewed_files")
	}

	if err = reviewedFileObj.doAfterSelectHooks(ctx, exec); err != nil {
		return reviewedFileObj, err
	}

	return reviewedFileObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ReviewedFile) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no reviewed_files provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(reviewedFileColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	reviewedFileInsertCacheMut.RLock()
	cache, cached := reviewedFileInsertCache[key]
	reviewedFileInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			reviewedFileAllColumns,
			reviewedFileColumnsWithDefault,
			reviewedFileColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(reviewedFileType, reviewedFileMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(reviewedFileType, reviewedFileMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `reviewed_files` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `reviewed_files` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `reviewed_files` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, reviewedFilePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into reviewed_files")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for reviewed_files")
	}

CacheNoHooks:
	if !cached {
		reviewedFileInsertCacheMut.Lock()
		reviewedFileInsertCache[key] = cache
		reviewedFileInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ReviewedFile.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ReviewedFile) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	reviewedFileUpdateCacheMut.RLock()
	cache, cached := reviewedFileUpdateCache[key]
	reviewedFileUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			reviewedFileAllColumns,
			reviewedFilePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update reviewed_files, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `reviewed_files` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, reviewedFilePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(reviewedFileType, reviewedFileMapping, append(wl, reviewedFilePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update reviewed_files row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for reviewed_files")
	}

	if !cached {
		reviewedFileUpdateCacheMut.Lock()
		reviewedFileUpdateCache[key] = cache
		reviewedFileUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q reviewedFileQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for reviewed_files")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for reviewed_files")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ReviewedFileSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reviewedFilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `reviewed_files` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, reviewedFilePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in reviewedFile slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all reviewedFile")
	}
	return rowsAff, nil
}

// Delete deletes a single ReviewedFile record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ReviewedFile) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ReviewedFile provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), reviewedFilePrimaryKeyMapping)
	sql := "DELETE FROM `reviewed_files` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from reviewed_files")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for reviewed_files")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q reviewedFileQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no reviewedFileQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from reviewed_files")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for reviewed_files")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ReviewedFileSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(reviewedFileBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reviewedFilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `reviewed_files` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, reviewedFilePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from reviewedFile slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for reviewed_files")
	}

	if len(reviewedFileAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ReviewedFile) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindReviewedFile(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ReviewedFileSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ReviewedFileSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reviewedFilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `reviewed_files`.* FROM `reviewed_files` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, reviewedFilePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ReviewedFileSlice")
	}

	*o = slice

	return nil
}

// ReviewedFileExists checks if the ReviewedFile row exists.
func ReviewedFileExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `reviewed_files` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if reviewed_files exists")
	}

	return exists, nil
}

var mySQLReviewedFileUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ReviewedFile) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no reviewed_files provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(reviewedFileColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLReviewedFileUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	reviewedFileUpsertCacheMut.RLock()
	cache, cached := reviewedFileUpsertCache[key]
	reviewedFileUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			reviewedFileAllColumns,
			reviewedFileColumnsWithDefault,
			reviewedFileColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			reviewedFileAllColumns,
			reviewedFilePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert reviewed_files, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`reviewed_files`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `reviewed_files` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(reviewedFileType, reviewedFileMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(reviewedFileType, reviewedFileMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for reviewed_files")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(reviewedFileType, reviewedFileMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for reviewed_files")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for reviewed_files")
	}

CacheNoHooks:
	if !cached {
		reviewedFileUpsertCacheMut.Lock()
		reviewedFileUpsertCache[key] = cache
		reviewedFileUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
