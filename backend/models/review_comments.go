// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ReviewComment is an object representing the database table.
type ReviewComment struct {
	ID             string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	ReviewedFileID string    `boil:"reviewed_file_id" json:"reviewed_file_id" toml:"reviewed_file_id" yaml:"reviewed_file_id"`
	ReviewerID     string    `boil:"reviewer_id" json:"reviewer_id" toml:"reviewer_id" yaml:"reviewer_id"`
	PageNumber     int       `boil:"page_number" json:"page_number" toml:"page_number" yaml:"page_number"`
	Comment        string    `boil:"comment" json:"comment" toml:"comment" yaml:"comment"`
	CreatedAt      time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *reviewCommentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L reviewCommentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ReviewCommentColumns = struct {
	ID             string
	ReviewedFileID string
	ReviewerID     string
	PageNumber     string
	Comment        string
	CreatedAt      string
	UpdatedAt      string
}{
	ID:             "id",
	ReviewedFileID: "reviewed_file_id",
	ReviewerID:     "reviewer_id",
	PageNumber:     "page_number",
	Comment:        "comment",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
}

var ReviewCommentTableColumns = struct {
	ID             string
	ReviewedFileID string
	ReviewerID     string
	PageNumber     string
	Comment        string
	CreatedAt      string
	UpdatedAt      string
}{
	ID:             "review_comments.id",
	ReviewedFileID: "review_comments.reviewed_file_id",
	ReviewerID:     "review_comments.reviewer_id",
	PageNumber:     "review_comments.page_number",
	Comment:        "review_comments.comment",
	CreatedAt:      "review_comments.created_at",
	UpdatedAt:      "review_comments.updated_at",
}

// Generated where

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var ReviewCommentWhere = struct {
	ID             whereHelperstring
	ReviewedFileID whereHelperstring
	ReviewerID     whereHelperstring
	PageNumber     whereHelperint
	Comment        whereHelperstring
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpernull_Time
}{
	ID:             whereHelperstring{field: "`review_comments`.`id`"},
	ReviewedFileID: whereHelperstring{field: "`review_comments`.`reviewed_file_id`"},
	ReviewerID:     whereHelperstring{field: "`review_comments`.`reviewer_id`"},
	PageNumber:     whereHelperint{field: "`review_comments`.`page_number`"},
	Comment:        whereHelperstring{field: "`review_comments`.`comment`"},
	CreatedAt:      whereHelpertime_Time{field: "`review_comments`.`created_at`"},
	UpdatedAt:      whereHelpernull_Time{field: "`review_comments`.`updated_at`"},
}

// ReviewCommentRels is where relationship names are stored.
var ReviewCommentRels = struct {
	ReviewedFile string
	Reviewer     string
}{
	ReviewedFile: "ReviewedFile",
	Reviewer:     "Reviewer",
}

// reviewCommentR is where relationships are stored.
type reviewCommentR struct {
	ReviewedFile *ReviewedFile `boil:"ReviewedFile" json:"ReviewedFile" toml:"ReviewedFile" yaml:"ReviewedFile"`
	Reviewer     *Reviewer     `boil:"Reviewer" json:"Reviewer" toml:"Reviewer" yaml:"Reviewer"`
}

// NewStruct creates a new relationship struct
func (*reviewCommentR) NewStruct() *reviewCommentR {
	return &reviewCommentR{}
}

func (r *reviewCommentR) GetReviewedFile() *ReviewedFile {
	if r == nil {
		return nil
	}
	return r.ReviewedFile
}

func (r *reviewCommentR) GetReviewer() *Reviewer {
	if r == nil {
		return nil
	}
	return r.Reviewer
}

// reviewCommentL is where Load methods for each relationship are stored.
type reviewCommentL struct{}

var (
	reviewCommentAllColumns            = []string{"id", "reviewed_file_id", "reviewer_id", "page_number", "comment", "created_at", "updated_at"}
	reviewCommentColumnsWithoutDefault = []string{"id", "reviewed_file_id", "reviewer_id", "page_number", "comment"}
	reviewCommentColumnsWithDefault    = []string{"created_at", "updated_at"}
	reviewCommentPrimaryKeyColumns     = []string{"id"}
	reviewCommentGeneratedColumns      = []string{}
)

type (
	// ReviewCommentSlice is an alias for a slice of pointers to ReviewComment.
	// This should almost always be used instead of []ReviewComment.
	ReviewCommentSlice []*ReviewComment
	// ReviewCommentHook is the signature for custom ReviewComment hook methods
	ReviewCommentHook func(context.Context, boil.ContextExecutor, *ReviewComment) error

	reviewCommentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	reviewCommentType                 = reflect.TypeOf(&ReviewComment{})
	reviewCommentMapping              = queries.MakeStructMapping(reviewCommentType)
	reviewCommentPrimaryKeyMapping, _ = queries.BindMapping(reviewCommentType, reviewCommentMapping, reviewCommentPrimaryKeyColumns)
	reviewCommentInsertCacheMut       sync.RWMutex
	reviewCommentInsertCache          = make(map[string]insertCache)
	reviewCommentUpdateCacheMut       sync.RWMutex
	reviewCommentUpdateCache          = make(map[string]updateCache)
	reviewCommentUpsertCacheMut       sync.RWMutex
	reviewCommentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var reviewCommentAfterSelectHooks []ReviewCommentHook

var reviewCommentBeforeInsertHooks []ReviewCommentHook
var reviewCommentAfterInsertHooks []ReviewCommentHook

var reviewCommentBeforeUpdateHooks []ReviewCommentHook
var reviewCommentAfterUpdateHooks []ReviewCommentHook

var reviewCommentBeforeDeleteHooks []ReviewCommentHook
var reviewCommentAfterDeleteHooks []ReviewCommentHook

var reviewCommentBeforeUpsertHooks []ReviewCommentHook
var reviewCommentAfterUpsertHooks []ReviewCommentHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ReviewComment) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewCommentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ReviewComment) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewCommentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ReviewComment) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewCommentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ReviewComment) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewCommentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ReviewComment) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewCommentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ReviewComment) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewCommentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ReviewComment) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewCommentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ReviewComment) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewCommentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ReviewComment) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewCommentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddReviewCommentHook registers your hook function for all future operations.
func AddReviewCommentHook(hookPoint boil.HookPoint, reviewCommentHook ReviewCommentHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		reviewCommentAfterSelectHooks = append(reviewCommentAfterSelectHooks, reviewCommentHook)
	case boil.BeforeInsertHook:
		reviewCommentBeforeInsertHooks = append(reviewCommentBeforeInsertHooks, reviewCommentHook)
	case boil.AfterInsertHook:
		reviewCommentAfterInsertHooks = append(reviewCommentAfterInsertHooks, reviewCommentHook)
	case boil.BeforeUpdateHook:
		reviewCommentBeforeUpdateHooks = append(reviewCommentBeforeUpdateHooks, reviewCommentHook)
	case boil.AfterUpdateHook:
		reviewCommentAfterUpdateHooks = append(reviewCommentAfterUpdateHooks, reviewCommentHook)
	case boil.BeforeDeleteHook:
		reviewCommentBeforeDeleteHooks = append(reviewCommentBeforeDeleteHooks, reviewCommentHook)
	case boil.AfterDeleteHook:
		reviewCommentAfterDeleteHooks = append(reviewCommentAfterDeleteHooks, reviewCommentHook)
	case boil.BeforeUpsertHook:
		reviewCommentBeforeUpsertHooks = append(reviewCommentBeforeUpsertHooks, reviewCommentHook)
	case boil.AfterUpsertHook:
		reviewCommentAfterUpsertHooks = append(reviewCommentAfterUpsertHooks, reviewCommentHook)
	}
}

// One returns a single reviewComment record from the query.
func (q reviewCommentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ReviewComment, error) {
	o := &ReviewComment{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for review_comments")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ReviewComment records from the query.
func (q reviewCommentQuery) All(ctx context.Context, exec boil.ContextExecutor) (ReviewCommentSlice, error) {
	var o []*ReviewComment

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ReviewComment slice")
	}

	if len(reviewCommentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ReviewComment records in the query.
func (q reviewCommentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count review_comments rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q reviewCommentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if review_comments exists")
	}

	return count > 0, nil
}

// ReviewedFile pointed to by the foreign key.
func (o *ReviewComment) ReviewedFile(mods ...qm.QueryMod) reviewedFileQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.ReviewedFileID),
	}

	queryMods = append(queryMods, mods...)

	return ReviewedFiles(queryMods...)
}

// Reviewer pointed to by the foreign key.
func (o *ReviewComment) Reviewer(mods ...qm.QueryMod) reviewerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.ReviewerID),
	}

	queryMods = append(queryMods, mods...)

	return Reviewers(queryMods...)
}

// LoadReviewedFile allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (reviewCommentL) LoadReviewedFile(ctx context.Context, e boil.ContextExecutor, singular bool, maybeReviewComment interface{}, mods queries.Applicator) error {
	var slice []*ReviewComment
	var object *ReviewComment

	if singular {
		var ok bool
		object, ok = maybeReviewComment.(*ReviewComment)
		if !ok {
			object = new(ReviewComment)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeReviewComment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeReviewComment))
			}
		}
	} else {
		s, ok := maybeReviewComment.(*[]*ReviewComment)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeReviewComment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeReviewComment))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &reviewCommentR{}
		}
		args = append(args, object.ReviewedFileID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &reviewCommentR{}
			}

			for _, a := range args {
				if a == obj.ReviewedFileID {
					continue Outer
				}
			}

			args = append(args, obj.ReviewedFileID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`reviewed_files`),
		qm.WhereIn(`reviewed_files.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ReviewedFile")
	}

	var resultSlice []*ReviewedFile
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ReviewedFile")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for reviewed_files")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for reviewed_files")
	}

	if len(reviewCommentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ReviewedFile = foreign
		if foreign.R == nil {
			foreign.R = &reviewedFileR{}
		}
		foreign.R.ReviewComments = append(foreign.R.ReviewComments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ReviewedFileID == foreign.ID {
				local.R.ReviewedFile = foreign
				if foreign.R == nil {
					foreign.R = &reviewedFileR{}
				}
				foreign.R.ReviewComments = append(foreign.R.ReviewComments, local)
				break
			}
		}
	}

	return nil
}

// LoadReviewer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (reviewCommentL) LoadReviewer(ctx context.Context, e boil.ContextExecutor, singular bool, maybeReviewComment interface{}, mods queries.Applicator) error {
	var slice []*ReviewComment
	var object *ReviewComment

	if singular {
		var ok bool
		object, ok = maybeReviewComment.(*ReviewComment)
		if !ok {
			object = new(ReviewComment)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeReviewComment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeReviewComment))
			}
		}
	} else {
		s, ok := maybeReviewComment.(*[]*ReviewComment)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeReviewComment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeReviewComment))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &reviewCommentR{}
		}
		args = append(args, object.ReviewerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &reviewCommentR{}
			}

			for _, a := range args {
				if a == obj.ReviewerID {
					continue Outer
				}
			}

			args = append(args, obj.ReviewerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`reviewers`),
		qm.WhereIn(`reviewers.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Reviewer")
	}

	var resultSlice []*Reviewer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Reviewer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for reviewers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for reviewers")
	}

	if len(reviewCommentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Reviewer = foreign
		if foreign.R == nil {
			foreign.R = &reviewerR{}
		}
		foreign.R.ReviewComments = append(foreign.R.ReviewComments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ReviewerID == foreign.ID {
				local.R.Reviewer = foreign
				if foreign.R == nil {
					foreign.R = &reviewerR{}
				}
				foreign.R.ReviewComments = append(foreign.R.ReviewComments, local)
				break
			}
		}
	}

	return nil
}

// SetReviewedFile of the reviewComment to the related item.
// Sets o.R.ReviewedFile to related.
// Adds o to related.R.ReviewComments.
func (o *ReviewComment) SetReviewedFile(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ReviewedFile) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `review_comments` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"reviewed_file_id"}),
		strmangle.WhereClause("`", "`", 0, reviewCommentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ReviewedFileID = related.ID
	if o.R == nil {
		o.R = &reviewCommentR{
			ReviewedFile: related,
		}
	} else {
		o.R.ReviewedFile = related
	}

	if related.R == nil {
		related.R = &reviewedFileR{
			ReviewComments: ReviewCommentSlice{o},
		}
	} else {
		related.R.ReviewComments = append(related.R.ReviewComments, o)
	}

	return nil
}

// SetReviewer of the reviewComment to the related item.
// Sets o.R.Reviewer to related.
// Adds o to related.R.ReviewComments.
func (o *ReviewComment) SetReviewer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Reviewer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `review_comments` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"reviewer_id"}),
		strmangle.WhereClause("`", "`", 0, reviewCommentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ReviewerID = related.ID
	if o.R == nil {
		o.R = &reviewCommentR{
			Reviewer: related,
		}
	} else {
		o.R.Reviewer = related
	}

	if related.R == nil {
		related.R = &reviewerR{
			ReviewComments: ReviewCommentSlice{o},
		}
	} else {
		related.R.ReviewComments = append(related.R.ReviewComments, o)
	}

	return nil
}

// ReviewComments retrieves all the records using an executor.
func ReviewComments(mods ...qm.QueryMod) reviewCommentQuery {
	mods = append(mods, qm.From("`review_comments`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`review_comments`.*"})
	}

	return reviewCommentQuery{q}
}

// FindReviewComment retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindReviewComment(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*ReviewComment, error) {
	reviewCommentObj := &ReviewComment{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `review_comments` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, reviewCommentObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from review_comments")
	}

	if err = reviewCommentObj.doAfterSelectHooks(ctx, exec); err != nil {
		return reviewCommentObj, err
	}

	return reviewCommentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ReviewComment) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no review_comments provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(reviewCommentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	reviewCommentInsertCacheMut.RLock()
	cache, cached := reviewCommentInsertCache[key]
	reviewCommentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			reviewCommentAllColumns,
			reviewCommentColumnsWithDefault,
			reviewCommentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(reviewCommentType, reviewCommentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(reviewCommentType, reviewCommentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `review_comments` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `review_comments` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `review_comments` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, reviewCommentPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into review_comments")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for review_comments")
	}

CacheNoHooks:
	if !cached {
		reviewCommentInsertCacheMut.Lock()
		reviewCommentInsertCache[key] = cache
		reviewCommentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ReviewComment.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ReviewComment) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	reviewCommentUpdateCacheMut.RLock()
	cache, cached := reviewCommentUpdateCache[key]
	reviewCommentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			reviewCommentAllColumns,
			reviewCommentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update review_comments, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `review_comments` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, reviewCommentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(reviewCommentType, reviewCommentMapping, append(wl, reviewCommentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update review_comments row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for review_comments")
	}

	if !cached {
		reviewCommentUpdateCacheMut.Lock()
		reviewCommentUpdateCache[key] = cache
		reviewCommentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q reviewCommentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for review_comments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for review_comments")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ReviewCommentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reviewCommentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `review_comments` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, reviewCommentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in reviewComment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all reviewComment")
	}
	return rowsAff, nil
}

// Delete deletes a single ReviewComment record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ReviewComment) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ReviewComment provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), reviewCommentPrimaryKeyMapping)
	sql := "DELETE FROM `review_comments` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from review_comments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for review_comments")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q reviewCommentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no reviewCommentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from review_comments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for review_comments")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ReviewCommentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(reviewCommentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reviewCommentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `review_comments` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, reviewCommentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from reviewComment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for review_comments")
	}

	if len(reviewCommentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ReviewComment) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindReviewComment(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ReviewCommentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ReviewCommentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reviewCommentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `review_comments`.* FROM `review_comments` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, reviewCommentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ReviewCommentSlice")
	}

	*o = slice

	return nil
}

// ReviewCommentExists checks if the ReviewComment row exists.
func ReviewCommentExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `review_comments` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if review_comments exists")
	}

	return exists, nil
}

var mySQLReviewCommentUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ReviewComment) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no review_comments provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(reviewCommentColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLReviewCommentUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	reviewCommentUpsertCacheMut.RLock()
	cache, cached := reviewCommentUpsertCache[key]
	reviewCommentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			reviewCommentAllColumns,
			reviewCommentColumnsWithDefault,
			reviewCommentColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			reviewCommentAllColumns,
			reviewCommentPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert review_comments, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`review_comments`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `review_comments` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(reviewCommentType, reviewCommentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(reviewCommentType, reviewCommentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for review_comments")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(reviewCommentType, reviewCommentMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for review_comments")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for review_comments")
	}

CacheNoHooks:
	if !cached {
		reviewCommentUpsertCacheMut.Lock()
		reviewCommentUpsertCache[key] = cache
		reviewCommentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
