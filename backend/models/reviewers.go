// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Reviewer is an object representing the database table.
type Reviewer struct {
	ID             string `boil:"id" json:"id" toml:"id" yaml:"id"`
	ReviewedFileID string `boil:"reviewed_file_id" json:"reviewed_file_id" toml:"reviewed_file_id" yaml:"reviewed_file_id"`
	UserID         int    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`

	R *reviewerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L reviewerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ReviewerColumns = struct {
	ID             string
	ReviewedFileID string
	UserID         string
}{
	ID:             "id",
	ReviewedFileID: "reviewed_file_id",
	UserID:         "user_id",
}

var ReviewerTableColumns = struct {
	ID             string
	ReviewedFileID string
	UserID         string
}{
	ID:             "reviewers.id",
	ReviewedFileID: "reviewers.reviewed_file_id",
	UserID:         "reviewers.user_id",
}

// Generated where

var ReviewerWhere = struct {
	ID             whereHelperstring
	ReviewedFileID whereHelperstring
	UserID         whereHelperint
}{
	ID:             whereHelperstring{field: "`reviewers`.`id`"},
	ReviewedFileID: whereHelperstring{field: "`reviewers`.`reviewed_file_id`"},
	UserID:         whereHelperint{field: "`reviewers`.`user_id`"},
}

// ReviewerRels is where relationship names are stored.
var ReviewerRels = struct {
	ReviewedFile   string
	User           string
	ReviewComments string
}{
	ReviewedFile:   "ReviewedFile",
	User:           "User",
	ReviewComments: "ReviewComments",
}

// reviewerR is where relationships are stored.
type reviewerR struct {
	ReviewedFile   *ReviewedFile      `boil:"ReviewedFile" json:"ReviewedFile" toml:"ReviewedFile" yaml:"ReviewedFile"`
	User           *User              `boil:"User" json:"User" toml:"User" yaml:"User"`
	ReviewComments ReviewCommentSlice `boil:"ReviewComments" json:"ReviewComments" toml:"ReviewComments" yaml:"ReviewComments"`
}

// NewStruct creates a new relationship struct
func (*reviewerR) NewStruct() *reviewerR {
	return &reviewerR{}
}

func (r *reviewerR) GetReviewedFile() *ReviewedFile {
	if r == nil {
		return nil
	}
	return r.ReviewedFile
}

func (r *reviewerR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *reviewerR) GetReviewComments() ReviewCommentSlice {
	if r == nil {
		return nil
	}
	return r.ReviewComments
}

// reviewerL is where Load methods for each relationship are stored.
type reviewerL struct{}

var (
	reviewerAllColumns            = []string{"id", "reviewed_file_id", "user_id"}
	reviewerColumnsWithoutDefault = []string{"id", "reviewed_file_id", "user_id"}
	reviewerColumnsWithDefault    = []string{}
	reviewerPrimaryKeyColumns     = []string{"id"}
	reviewerGeneratedColumns      = []string{}
)

type (
	// ReviewerSlice is an alias for a slice of pointers to Reviewer.
	// This should almost always be used instead of []Reviewer.
	ReviewerSlice []*Reviewer
	// ReviewerHook is the signature for custom Reviewer hook methods
	ReviewerHook func(context.Context, boil.ContextExecutor, *Reviewer) error

	reviewerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	reviewerType                 = reflect.TypeOf(&Reviewer{})
	reviewerMapping              = queries.MakeStructMapping(reviewerType)
	reviewerPrimaryKeyMapping, _ = queries.BindMapping(reviewerType, reviewerMapping, reviewerPrimaryKeyColumns)
	reviewerInsertCacheMut       sync.RWMutex
	reviewerInsertCache          = make(map[string]insertCache)
	reviewerUpdateCacheMut       sync.RWMutex
	reviewerUpdateCache          = make(map[string]updateCache)
	reviewerUpsertCacheMut       sync.RWMutex
	reviewerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var reviewerAfterSelectHooks []ReviewerHook

var reviewerBeforeInsertHooks []ReviewerHook
var reviewerAfterInsertHooks []ReviewerHook

var reviewerBeforeUpdateHooks []ReviewerHook
var reviewerAfterUpdateHooks []ReviewerHook

var reviewerBeforeDeleteHooks []ReviewerHook
var reviewerAfterDeleteHooks []ReviewerHook

var reviewerBeforeUpsertHooks []ReviewerHook
var reviewerAfterUpsertHooks []ReviewerHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Reviewer) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Reviewer) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Reviewer) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Reviewer) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Reviewer) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Reviewer) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Reviewer) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Reviewer) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Reviewer) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reviewerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddReviewerHook registers your hook function for all future operations.
func AddReviewerHook(hookPoint boil.HookPoint, reviewerHook ReviewerHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		reviewerAfterSelectHooks = append(reviewerAfterSelectHooks, reviewerHook)
	case boil.BeforeInsertHook:
		reviewerBeforeInsertHooks = append(reviewerBeforeInsertHooks, reviewerHook)
	case boil.AfterInsertHook:
		reviewerAfterInsertHooks = append(reviewerAfterInsertHooks, reviewerHook)
	case boil.BeforeUpdateHook:
		reviewerBeforeUpdateHooks = append(reviewerBeforeUpdateHooks, reviewerHook)
	case boil.AfterUpdateHook:
		reviewerAfterUpdateHooks = append(reviewerAfterUpdateHooks, reviewerHook)
	case boil.BeforeDeleteHook:
		reviewerBeforeDeleteHooks = append(reviewerBeforeDeleteHooks, reviewerHook)
	case boil.AfterDeleteHook:
		reviewerAfterDeleteHooks = append(reviewerAfterDeleteHooks, reviewerHook)
	case boil.BeforeUpsertHook:
		reviewerBeforeUpsertHooks = append(reviewerBeforeUpsertHooks, reviewerHook)
	case boil.AfterUpsertHook:
		reviewerAfterUpsertHooks = append(reviewerAfterUpsertHooks, reviewerHook)
	}
}

// One returns a single reviewer record from the query.
func (q reviewerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Reviewer, error) {
	o := &Reviewer{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for reviewers")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Reviewer records from the query.
func (q reviewerQuery) All(ctx context.Context, exec boil.ContextExecutor) (ReviewerSlice, error) {
	var o []*Reviewer

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Reviewer slice")
	}

	if len(reviewerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Reviewer records in the query.
func (q reviewerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count reviewers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q reviewerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if reviewers exists")
	}

	return count > 0, nil
}

// ReviewedFile pointed to by the foreign key.
func (o *Reviewer) ReviewedFile(mods ...qm.QueryMod) reviewedFileQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.ReviewedFileID),
	}

	queryMods = append(queryMods, mods...)

	return ReviewedFiles(queryMods...)
}

// User pointed to by the foreign key.
func (o *Reviewer) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// ReviewComments retrieves all the review_comment's ReviewComments with an executor.
func (o *Reviewer) ReviewComments(mods ...qm.QueryMod) reviewCommentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`review_comments`.`reviewer_id`=?", o.ID),
	)

	return ReviewComments(queryMods...)
}

// LoadReviewedFile allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (reviewerL) LoadReviewedFile(ctx context.Context, e boil.ContextExecutor, singular bool, maybeReviewer interface{}, mods queries.Applicator) error {
	var slice []*Reviewer
	var object *Reviewer

	if singular {
		var ok bool
		object, ok = maybeReviewer.(*Reviewer)
		if !ok {
			object = new(Reviewer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeReviewer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeReviewer))
			}
		}
	} else {
		s, ok := maybeReviewer.(*[]*Reviewer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeReviewer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeReviewer))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &reviewerR{}
		}
		args = append(args, object.ReviewedFileID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &reviewerR{}
			}

			for _, a := range args {
				if a == obj.ReviewedFileID {
					continue Outer
				}
			}

			args = append(args, obj.ReviewedFileID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`reviewed_files`),
		qm.WhereIn(`reviewed_files.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ReviewedFile")
	}

	var resultSlice []*ReviewedFile
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ReviewedFile")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for reviewed_files")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for reviewed_files")
	}

	if len(reviewerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ReviewedFile = foreign
		if foreign.R == nil {
			foreign.R = &reviewedFileR{}
		}
		foreign.R.Reviewers = append(foreign.R.Reviewers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ReviewedFileID == foreign.ID {
				local.R.ReviewedFile = foreign
				if foreign.R == nil {
					foreign.R = &reviewedFileR{}
				}
				foreign.R.Reviewers = append(foreign.R.Reviewers, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (reviewerL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeReviewer interface{}, mods queries.Applicator) error {
	var slice []*Reviewer
	var object *Reviewer

	if singular {
		var ok bool
		object, ok = maybeReviewer.(*Reviewer)
		if !ok {
			object = new(Reviewer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeReviewer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeReviewer))
			}
		}
	} else {
		s, ok := maybeReviewer.(*[]*Reviewer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeReviewer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeReviewer))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &reviewerR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &reviewerR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(reviewerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Reviewers = append(foreign.R.Reviewers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Reviewers = append(foreign.R.Reviewers, local)
				break
			}
		}
	}

	return nil
}

// LoadReviewComments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (reviewerL) LoadReviewComments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeReviewer interface{}, mods queries.Applicator) error {
	var slice []*Reviewer
	var object *Reviewer

	if singular {
		var ok bool
		object, ok = maybeReviewer.(*Reviewer)
		if !ok {
			object = new(Reviewer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeReviewer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeReviewer))
			}
		}
	} else {
		s, ok := maybeReviewer.(*[]*Reviewer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeReviewer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeReviewer))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &reviewerR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &reviewerR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`review_comments`),
		qm.WhereIn(`review_comments.reviewer_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load review_comments")
	}

	var resultSlice []*ReviewComment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice review_comments")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on review_comments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for review_comments")
	}

	if len(reviewCommentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ReviewComments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &reviewCommentR{}
			}
			foreign.R.Reviewer = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ReviewerID {
				local.R.ReviewComments = append(local.R.ReviewComments, foreign)
				if foreign.R == nil {
					foreign.R = &reviewCommentR{}
				}
				foreign.R.Reviewer = local
				break
			}
		}
	}

	return nil
}

// SetReviewedFile of the reviewer to the related item.
// Sets o.R.ReviewedFile to related.
// Adds o to related.R.Reviewers.
func (o *Reviewer) SetReviewedFile(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ReviewedFile) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `reviewers` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"reviewed_file_id"}),
		strmangle.WhereClause("`", "`", 0, reviewerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ReviewedFileID = related.ID
	if o.R == nil {
		o.R = &reviewerR{
			ReviewedFile: related,
		}
	} else {
		o.R.ReviewedFile = related
	}

	if related.R == nil {
		related.R = &reviewedFileR{
			Reviewers: ReviewerSlice{o},
		}
	} else {
		related.R.Reviewers = append(related.R.Reviewers, o)
	}

	return nil
}

// SetUser of the reviewer to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Reviewers.
func (o *Reviewer) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `reviewers` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, reviewerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &reviewerR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Reviewers: ReviewerSlice{o},
		}
	} else {
		related.R.Reviewers = append(related.R.Reviewers, o)
	}

	return nil
}

// AddReviewComments adds the given related objects to the existing relationships
// of the reviewer, optionally inserting them as new records.
// Appends related to o.R.ReviewComments.
// Sets related.R.Reviewer appropriately.
func (o *Reviewer) AddReviewComments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ReviewComment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ReviewerID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `review_comments` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"reviewer_id"}),
				strmangle.WhereClause("`", "`", 0, reviewCommentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ReviewerID = o.ID
		}
	}

	if o.R == nil {
		o.R = &reviewerR{
			ReviewComments: related,
		}
	} else {
		o.R.ReviewComments = append(o.R.ReviewComments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &reviewCommentR{
				Reviewer: o,
			}
		} else {
			rel.R.Reviewer = o
		}
	}
	return nil
}

// Reviewers retrieves all the records using an executor.
func Reviewers(mods ...qm.QueryMod) reviewerQuery {
	mods = append(mods, qm.From("`reviewers`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`reviewers`.*"})
	}

	return reviewerQuery{q}
}

// FindReviewer retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindReviewer(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Reviewer, error) {
	reviewerObj := &Reviewer{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `reviewers` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, reviewerObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from reviewers")
	}

	if err = reviewerObj.doAfterSelectHooks(ctx, exec); err != nil {
		return reviewerObj, err
	}

	return reviewerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Reviewer) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no reviewers provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(reviewerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	reviewerInsertCacheMut.RLock()
	cache, cached := reviewerInsertCache[key]
	reviewerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			reviewerAllColumns,
			reviewerColumnsWithDefault,
			reviewerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(reviewerType, reviewerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(reviewerType, reviewerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `reviewers` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `reviewers` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `reviewers` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, reviewerPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into reviewers")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for reviewers")
	}

CacheNoHooks:
	if !cached {
		reviewerInsertCacheMut.Lock()
		reviewerInsertCache[key] = cache
		reviewerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Reviewer.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Reviewer) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	reviewerUpdateCacheMut.RLock()
	cache, cached := reviewerUpdateCache[key]
	reviewerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			reviewerAllColumns,
			reviewerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update reviewers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `reviewers` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, reviewerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(reviewerType, reviewerMapping, append(wl, reviewerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update reviewers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for reviewers")
	}

	if !cached {
		reviewerUpdateCacheMut.Lock()
		reviewerUpdateCache[key] = cache
		reviewerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q reviewerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for reviewers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for reviewers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ReviewerSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reviewerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `reviewers` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, reviewerPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in reviewer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all reviewer")
	}
	return rowsAff, nil
}

// Delete deletes a single Reviewer record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Reviewer) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Reviewer provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), reviewerPrimaryKeyMapping)
	sql := "DELETE FROM `reviewers` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from reviewers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for reviewers")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q reviewerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no reviewerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from reviewers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for reviewers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ReviewerSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(reviewerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reviewerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `reviewers` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, reviewerPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from reviewer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for reviewers")
	}

	if len(reviewerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Reviewer) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindReviewer(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ReviewerSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ReviewerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reviewerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `reviewers`.* FROM `reviewers` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, reviewerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ReviewerSlice")
	}

	*o = slice

	return nil
}

// ReviewerExists checks if the Reviewer row exists.
func ReviewerExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `reviewers` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if reviewers exists")
	}

	return exists, nil
}

var mySQLReviewerUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Reviewer) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no reviewers provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(reviewerColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLReviewerUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	reviewerUpsertCacheMut.RLock()
	cache, cached := reviewerUpsertCache[key]
	reviewerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			reviewerAllColumns,
			reviewerColumnsWithDefault,
			reviewerColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			reviewerAllColumns,
			reviewerPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert reviewers, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`reviewers`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `reviewers` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(reviewerType, reviewerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(reviewerType, reviewerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for reviewers")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(reviewerType, reviewerMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for reviewers")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for reviewers")
	}

CacheNoHooks:
	if !cached {
		reviewerUpsertCacheMut.Lock()
		reviewerUpsertCache[key] = cache
		reviewerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
